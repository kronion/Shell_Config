"search
set hlsearch
nnoremap <silent><CR> :noh<CR><CR>

"word breaks
set iskeyword-=_

"paste mode
nnoremap <C-J> :set invpaste paste?<CR>
"set pastetoggle=<C-J> "vim autoindent on pasted code
set showmode

"Install vim-plug if not already present
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Helper utility for conditional loading of plugins
function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

"Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')
"Declare the list of plugins.
Plug 'ambv/black' "Opinionated formatting for Python
Plug 'garbas/vim-snipmate' "Snippet expansion engine
Plug 'github/copilot.vim', Cond(has('nvim-0.6')) "gpt3 code completion (requires nvim 0.6+)
Plug 'honza/vim-snippets' "Snippets for a large variety of languages
Plug 'jackMort/ChatGPT.nvim', Cond(has('nvim')) "gpt chat interface
Plug 'marcweber/vim-addon-mw-utils' "Dependency for vim-snipmate
Plug 'neoclide/coc.nvim', Cond(has('nvim'), {'branch': 'release'})  "Autocompletion
Plug 'nvim-lua/plenary.nvim', Cond(has('nvim'))  " Dependency of telescope.nvim
Plug 'nvim-telescope/telescope.nvim', Cond(has('nvim'), { 'tag': '0.1.0' })
Plug 'scrooloose/nerdtree' "File tree explorer
Plug 'sheerun/vim-polyglot'
Plug 'tomtom/tlib_vim' "Dependency for vim-snipmate
" Plug 'tpope/vim-commentary' "Motions for commenting
Plug 'tpope/vim-surround' "Surround selections with quotes, etc.
"Plug 'tpope/vim-sensible'
Plug 'williamboman/mason.nvim', Cond(has('nvim'))  " Neovim package manager, primarily used for pyright installation
Plug 'vim-airline/vim-airline' "Better status line
Plug 'w0rp/ale'
" Plug 'akinsho/bufferline.nvim', Cond(has('nvim-0.7'), { 'tag': 'v2.*' })  " Tab and buffer line (requires nvim 0.7+)
"List ends here. Plugins become visible to Vim after this call.
call plug#end()

syntax on "Enable syntax highlighting
filetype plugin indent on

"airline
let g:airline_powerline_fonts=1 "Enable extended font-based symbols
let g:airline#extensions#tabline#enabled=1 "Show all open buffers

"nerdtree"
"map nerdtree to cntrl n"
map <C-n> :NERDTreeToggle<CR>

"You Complete Me"
" let g:ycm_key_list_select_completion = ['<Down>']
" let g:ycm_key_list_previous_completion = ['<Up>']
" let g:ycm_autoclose_preview_window_after_completion = 1

"Autocomplete menu"
" TODO delete if these are no longer needed
" In most context gui colors will be used over cterm colors
" highlight Pmenu ctermfg=15 ctermbg=172
" highlight PmenuSel ctermfg=172 ctermbg=8

"ALE
let g:airline#extensions#ale#enabled=1
let g:ale_fixers={
\   'python': ['black', 'isort'],
\}
let g:ale_pattern_options={
\   '\.min\.css$': {'ale_linters': [], 'ale_fixers': []},
\   '\.bundle\.js$': {'ale_linters': [], 'ale_fixers': []},
\   '\.min\.js$': {'ale_linters': [], 'ale_fixers': []},
\}

"Latest snipmate parser version. See :h snipmate-deprecate
let g:snipMate = { 'snippet_version' : 1 }

"vim-terraform
let g:terraform_fold_sections=1
let g:terraform_remap_spacebar=1
